BEGIN
Oracle Documentation
Oracle by Example brandingInstall Android Development Tools
Before You Begin
Install and Set Up Android Studio
Install an Android SDK Platform Package
Create and Start an Android Virtual Device
Install the Java SE Development Kit 8
Create Environment Variables
section 0Before You Begin
This 15-minute tutorial shows you how to install Android Studio, which includes the Android SDK, and create an Android Virtual Device (AVD) on which you install an Oracle JavaScript Extension Toolkit (Oracle JET) hybrid mobile application during a later tutorial. The time to complete doesn’t include processing time as a result of your activities.
Background
The Oracle JET command-line interface invokes the Android SDK that you install with Android Studio to build an Android application package (APK) file from the source files of your hybrid mobile application. This APK file is installed on an AVD to enable you to test the hybrid mobile application.
What Do You Need?
A computer that meets the system requirements to install Android Studio. See System requirements at https://developer.android.com/studio/
section 1Install and Set Up Android Studio
Depending on the operating system of your computer, the Android Studio installation wizard prompts you with dialogs where you choose between standard or custom install types. Choose the options recommended by the Android Studio installation wizard as these options include the components that you require to create and install a hybrid mobile application on an AVD. They also include an Android emulator and an emulator accelerator appropriate for your computer, be that Windows, Mac, or Linux.
Go to the Download page for Android Studio on the Android Developer's website at https://developer.android.com/studio/ and click DOWNLOAD ANDROID STUDIO.
Review and accept the terms and conditions in the Download Android Studio dialog that appears and click DOWNLOAD ANDROID STUDIO FOR PLATFORM where PLATFORM refers to the operating system of your machine, such as Windows, Mac, or Linux.
Go to the Install Android Studio guide at https://developer.android.com/studio/install and follow the instructions for your operating system to install and start Android Studio.
If you run Android Studio behind a firewall or secure network, an Android Studio First Run dialog appears which displays a button (Setup Proxy) that you click to enter the proxy server settings for your environment. This allows Android Studio to complete the download of the components for a standard install.
In the Welcome to Android Studio dialog, select Start a new Android Studio project, and then, in the Create New Project wizard, accept the default options to progress to the final screen in the wizard and click Finish.
This enables the Android Studio toolbar with the options that you need to create an AVD. It also downloads and configures the Gradle build tool that the Android SDK invokes to build the APK file when you complete the creation of your Oracle JET hybrid mobile application.
If you run Android Studio behind a firewall or secure network, a Proxy Settings dialog appears that enables you to configure proxy settings for the Gradle build tool that Android Studio downloads and configures. Provide the proxy settings for your environment to ensure that the Gradle build tool functions correctly.
section 2Install an Android SDK Platform Package
In the Android Studio toolbar, click the SDK Manager icon (Android SDK Manager) to open the Android SDK page in the Default Settings dialog.
In the SDK Platforms tab, select Android 8.0 (Oreo) with an API Level value of 26, and click Apply.
Description of sdkmgrdialog.png follows
Description of the illustration sdkmgrdialog.png
Click OK in the confirmation dialog that appears and accept the license agreement to proceed with the installation.
Once the installation completes, click Finish and then click OK to close the Default Settings dialog.
section 3Create and Start an Android Virtual Device
In the Android Studio toolbar, click the AVD Manager icon (AVD Manager) and click Create Virtual Device in the Android Virtual Device Manager dialog that opens.
In the Phone category of the Choose a device definition page of the Virtual Device Configuration dialog, select Nexus 5X and click Next.
In the Recommended tab of the Select a system image page, click Download for the Oreo entry with an API Level of 26.
Description of downloadoreo.png follows
Description of the illustration downloadoreo.png
The SDK Quickfix Installation wizard opens.
Accept the license agreement to proceed with the download of the system image for Android 8.0 with API Level 26. Once the installation completes, click Finish and then click Next in the Select a system page.
In the Verify Configuration page, review and accept the default settings such as the AVD Name value of Nexus 5X API 26, then click Finish.
In the Android Virtual Device Manager dialog, click the Launch this AVD in the emulator icon (Emulator Start Icon) under the Actions column for the newly-created Nexus 5X API 26 AVD.
The Android emulator starts and loads the Nexus 5X API 26 AVD. A toolbar appears to the right of the AVD that provides UI controls to interact with the AVD.
Description of android-avd.png follows
Description of the illustration sdkmgrdialog.png
section 4Install the Java SE Development Kit 8
Go to the Java SE Development Kit 8 Downloads page at http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html, accept the license agreement, and download the Java SE Development Kit installation file for your platform.
Follow the JDK installation instructions for your platform at https://docs.oracle.com/javase/8/docs/technotes/guides/install/toc.html.
section 5Create Environment Variables
To function correctly, the Apache Cordova command-line interface that the Oracle JET command-line interface communicates with requires that you configure environment variables. These environment variables reference the installation location of the Android SDK that is installed by Android Studio and the Java SE Development Kit 8.
For Windows.
Open the Environment Variables dialog from the System Properties dialog by navigating Control Panel > System and Security > System > Advanced System Settings > Environment Variables.
Click New in the Environment Variables dialog and set the values of the variables to the location of the JDK and Android SDK locations, as shown in the following image. You can obtain the Android SDK location from the Android SDK page of the Default Settings dialog that you access in Android Studio by clicking Tools > SDK Manager.
Description of envvar.png follows
Description of the illustration envvar.png
For Mac and Linux-type systems, the settings depend upon your default shell. For example, on a Mac system using the Bash shell, add the following lines in ~/.bash profile.
export JAVA_HOME=/Development/jdkInstallDir/
export ANDROID_HOME=/Development/android-sdk/
About Oracle Contact Us Legal Notices Terms of Use Your Privacy Rights Copyright © 2019, Oracle and/or its affiliates. All rights reserved.
GLOW4
GLOW7
#!/Usr/bin/Bash/ env :
GLOW4
Request :Pull
Pulls :pull_requests :#!/https://github.com/mowjoejoejoejoe/docs/compare/main...0-wiz-0:docs:TingluoHuang@Patch 2
BEGIN'
GLOW4'
checkout ':'#'Checks'-out ':via '::'#'Coommand.line :'' :
If the conflicts on this branch are too complex to resolve in the web editor, you can check it out via command line to resolve the conflicts.
https://github.com/mowjoejoejoejoe/WORKSFLOW.git
Step 1: Clone the repository or update your local repository with the latest changes.
git pull origin main
Step 2: Switch to the head branch of the pull request.
git checkout Master
Step 3: Merge the base branch into the head branch.
git merge main
Step 4: Fix the conflicts and commit the result.
See Resolving a merge conflict using the command line for step-by-step instructions on resolving merge conflicts.
Step 5: Push the changes.
git push -u origin Master
https://github.com/mowjoejoejoejoe/docs/compare/main...0-wiz-0:docs:TingluoHuang-patch-1
\
(?i)addassigneestoassignable
(?i)addlabelstolabelable
(?i)api
(?i)bluetooth
(?i)codeql
(?i)cpp
(?i)cpu
(?i)crt
(?i)css
(?i)dev
(?i)docx
(?i)env
(?i)facebook
(?i)gc
(?i)gifs?
(?i)github
(?i)gpg
(?i)graphql
(?i)gz
(?i)html
(?i)https?
(?i)jpg
(?i)js
(?i)json
(?i)mov
(?i)nasa
(?i)npm
(?i)nvm
(?i)pdf
(?i)php
(?i)png
(?i)pptx
(?i)rdoc
(?i)rsa
(?i)rss
(?i)scim
(?i)sha
(?i)svg
(?i)svn
(?i)tmp
(?i)todo
(?i)toml
(?i)tsv
(?i)tv
(?i)txt
(?i)ubuntu
(?i)uri
(?i)vmg
(?i)vue(:js)?
(?i)wifi
(?i)xlsx
(?i)xml
(?i)yaml
(?i)yml
[aA]llowlist(?:ing)?
[aA]utogenerated
[aA]utolink(?:s|ed)?
[cC]odespaces?
[cC]ollectd
[eE]lasticsearch
[eE]xfiltrating
[gG]radle
[hH]ubcat
[iI]denticon
[jJ]inja
[kK]ustomize
[lL]inux
[lL]ucene
[mM]icrosoft
[mM]ultiline
[oO]cto(?:kit|cat)?
[pP]ageviews
[pP]arallelization
[pP]re
[pP]roxying
[pP]seudonymized
[rR]ebased?
[rR]ebasing
[rR]erequest
[rR]evokable
[rR]ostered
[sS]everability
[sS]trikethrough
[sS]ubprocessing
[sS]ubprocessor
[sS]udo
[tT]akedown
[tT]ransclusion
[tT]riaging
[uU]ncomment
[uU]nfollow
[uU]nhid(?:e|ing)
[uU]npublishing
[uU]nresolving
[uU]nretire
[uU]nreviewed
[uU]nstar
[uU]nsuspend
[uU]ntrusted
[uU]nverify
[uU]nversioned
[uU]nwatch
abcd
adminable
Adoptium
Affero
Aland
alia
anonymized
approvers?
archivability
Arq
asc
Atlassian
attrs
auditlog
Authy
autobuild
Autoconf
autodetect
Autofetch
autofills?
autograding
automations
Automattic
autoscalers?
autoscaling
backfilled
Bazel
becca
benbalter
benefitting
benjaminp
bert
blockchain
bolding
bolton
boolean
bootcamps?
boto
botocore
Braintree
brettcannon
brower
Bundler
Caicos
callout
Camo
captcha
Carbonite
Carlini
carrotsearch
certifi
chardet
chroots?
Citrix
Clearbit
Cliquez
Cobertura
codeblock
codec
Codium
combatting
committish
composable
configs?
cppy
cpython
cron
crontab
cryptocurrency
cryptomining
csproj
cybercrime
datacenters?
datastores?
datetime
dateutil
deallocate
deauthorized
deauthorizes
decompile
dedent
defunkt
deidentify
deliverables?
demianbrecht
demilestoned
Dependabot
deprovision
deprovisioned
dereferenced?
discoverability
dmnfarrell
Dockerfile
dotenv
dotfiles?
dotnet
downscope
downvoting
Eloqua
enablement
enthought
enums?
exfiltrated?
failover
fairyfloss
fakeaction
fastai
fayland
filepaths?
filesize
Fixup
fnmatch
forkable
formatters
fpco
fprime
friedman
frontmatter
fullname
futbol
Gazit
gcloud
Gebru
Gemfiles?
gemrc
geo
gh
gidgethub
gists?
gitattributes?
gitk
gjtorikian
gollum
Grafana
Gravatar
hardcode
hardcoded
hardcoding
Hashicorp
Hashimoto
hh
Homebrew
hostname
hotpackage
hotpatch
hotpatching
hovercards?
hppc
Hubot
Hyperscan
iana
ianare
iceland
ici
idna
ies
infringers?
innersource
innersourcing
interdependencies
isor
iss
itsdangerous
jaeteekae
Janky
JavaScript
jemoji
Jira
jkeylu
jlord
jmespath
Joomla
journalctl
jpaugh
jq
jts
kanban
kansas
Kbuild
kenya
keycutter
keyfiles?
keypair
kjd
kohsuke
kramdown
Kumiko
Laravel
launchd
learnings
legislations
Liberapay
libsaas
Libsodium
licensors?
licensure
locationtech
lockfiles?
lodash
Logstash
london
lowercased
Luhansk
lxml
Macports
Mada
madler
Mailgun
Majeure
Maki
manpage
markupsafe
matplotlib
matrixes
mdo
Memcache
menubar
mergeability
mergeable
metacpan
michael
middleware
milestoned
Miniconda
minio
Mmmmm
monospaced?
Moodle
mozilla
multithread
multithreaded
myorg
Nagios
nameservers?
namespace
nano
nanoc
nat
nbviewer
Nexmo
Nginx
ngrok
noreply
nuget
numpy
nuspec
oauth
obtenir
Okta
onboarded
onboarding
onwards
opencv
openssh
Otechie
overconsumption
passwordless
Patreon
perl
pexpect
philschatz
pipenv
Pithub
pksunkara
plaintext
plu
pluggy
Pluralsight
postsecondary
PowerPoint
PowerShell
Probot
programatically
protectable
pseudonymisation
ptyprocess
publickey
py
Pygments
pypa
pyparsing
pyserial
pytest
pytz
pyyaml
qlpacks?
qmake
Quickstarts
rauhryan
Ravi
Raynes
rb
readme
realtime
reauthenticate
reblame
recategorized
redactions?
redcarpet
redirections
Redis
reimplement
reinstatements?
remediations
renderable
Replit
repls
repo
reselecting
Resque
resync
retargeted
retrievability
retrigger
reusability
roadmaps?
rollout
rsync
Rubocop
Rubygems
runtimes?
russia
sanitization
scipy
sdepold
semver
Sendgrid
serverless
setoff
severities
shipit
shortcode
shumway
signup
signups
simplestyle
Smee
softprops
spammy
sponsorable
src
Statsd
stringifying
styleguide
subcommand
subfields?
subfolders?
sublicensable
sublicense
subnetworks?
subprocesors?
subprocessor
subprojects?
substring
subtrees?
syntaxes
syslog
tada
Tailscale
tdunning
teardown
Termux
textarea
textbox
themself
tibdex
Tidelift
Tiferet
timeframe
timestamping
tkintertable
toolchains?
tooltips?
torvalds
traceroute
transformative
treemap
triaged
twbs
Twilio
typeaheads
Typora
tz
uiri
unactionable
unarchived
unarchives?
unarchiving
unassign
uncurated
unencoded
unencrypted
unescaped
unicode
Unlicense
unlink
unmark
unmarking
unmerged
unminimized
unpatched
unpause
unpublish
unpublished
unpushed
unredacted
unresolve
unsave
unscoped
unselect
unstash
unstashing
untrack
untracked
updatepullrequest
updatepullrequest
updatePullRequest
upscaled
upvoted
urls?
usr
validator
vendored
vendoring
Vijzelstraat
vimrc
von
vscode
Waf
waitlist
walkthrough
wanstrath
webcrawlers?
webos
webpages?
werkzeug
wget
whistleblower
whiteinge
whitepaper
Wiet
wireframe
wonkiness
www
Xcode
Zendesk
Zenodo
zlib
Zsh
Zuora
Error	Correction	Location
from from	from	53:246
secert	secret	78:230
the the	the	45:256
be be	be	28:212
worflows	workflows	206:86
Luhasnk	Luhansk	51:45
transfering	transferring	535:154
Nothwithstanding	Notwithstanding	287:70
apprioriate	appropriate	121:283
currenly	currently	23:259
vulnerabilites	vulnerabilities	43:36
organizaton	organization	213:136
offical	official	29:39
Commiters	Committers	100:143
Configuration
If you'd like to add Vale to this repo, here's the configuration I used:

StylesPath = .github/styles
MinAlertLevel = suggestion

# The accept.txt file is given above
Vocab = Base

SkippedScopes = script, style, pre, figure, alt, strong

[*.md]
BasedOnStyles = Vale

TokenIgnores = ({%.+?%}), ({{.+?}})

BlockIgnores = (?s) *({% raw %}\n.*?\n{% endraw %})
This generally worked pretty good. There were still a few edge cases that I needed to disabled Vale on (using <!-- vale off --> comments), such as the tables in migrating-from-circleci-to-github-actions.md.

I understand if this isn't something you're interested in, but I figured I'd share my work just in case.

You can't vote on a locked discussion
sarahs reacted with heart emoji
Replies:3 comments
Comment options

ramyaparimi
on May 9, 2022
@jdkato Thanks so much for sharing your thoughts in here. We have been trying to implement Vale on this repo since quite some time. We faced a few blockers owing to the challenges while handling non standard markup situations. We raised raised this and this issue in the past with the challenges we had.

With your suggestion, I am currently using TokenIgnores to ignore liquids during linting. The use of regex in BlockedIgnores is something I haven't tried so I am going to check out your configuration.

Thanks so much for choosing the GitHub docs repo as a test for your use case. I will get back to you once I test this and discuss with the team 💖 .

You can't vote on a locked discussion
shukla2004 reacted with thumbs up emoji
0 replies
Comment options

sarahs
on May 24, 2022
Maintainer
Thanks @jdkato, this is so great! You're right that Liquid in our Markdown has posed some challenges for us in setting up Vale.

I tried out your config and the results are really promising. The main scenario I wasn't able to get it working on is nested Liquid. So for example, in this block:

1. Under "Management", type the username of the person you want to designate as a {% data variables.product.prodname_github_app %} manager in the organization, and click **Grant**. 

    ![Add a {% data variables.product.prodname_github_app %} manager](/assets/images/help/organizations/add-github-app-manager.png)
☝️ Vale correctly ignores the first data tag but incorrectly flags the term prodname in the second tag. I am assuming this is because the second tag is nested in image markup, although I am not 100% sure that's the reason.

One workaround we've had success with is simply stripping out the Liquid tags via a regex (a la perl -p -e 's/{%.*?%}//g' content/*) before running Vale. We realize this hack only works because our Liquid tags never span more than one line; if our replacement changed line breaks, the Vale action's PR commenting would be inaccurate. But the simplicity of this approach has an appeal.

Curious what you think about the nested tag scenario and the best approach for that.

You can't vote on a locked discussion
0 replies
Comment options

jdkato
on May 26, 2022
Author
The configuration I shared above should handle this case by adding alt to SkippedScopes. It's not ideal because you miss out on linting alt tags but, at the same time, the prevalence of templating in them means the content isn't all that meaningful from a linting perspective anyway.

You can't vote on a locked discussion
sarahs reacted with thumbs up emoji
0 replies
An owner of this repository has limited the ability to comment from new users.
Category
💡
Ideas
Labels
None yet
3 participants
@jdkato
@sarahs
@ramyaparimi
Notifications
You’re not receiving notifications from this thread.
 Create issue from discussion
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Add automated spell check · Discussion #17674 · github/docsBEGIN
!#/Usr/bin/BAsh ENV
GLOW4
ci:C:\I :
:Build::
DEPLOYEE :
LAUNCH :
RELEASE :
Script::/# WORKFLOWS.md
Request :Pull :AUTOMATE AUTOMATES BEGIN GLOW4 AUTOMATES#Test :tests :tests :Run'@ci:
::Pulls :Request.md'@bitore.sig/BOTURE : 
PUBLISH::
:Build::
Add :Automates.yml/spell-check.yml :
